package com.securityconepts.controller.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.provisioning.JdbcUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;

@Configuration
public class ProjectSecurityConfig {

	 @Bean
	    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {

	        /**
	         *  Below is the custom security configurations
	         */
	
	        http.authorizeHttpRequests((requests) -> requests
	                        .requestMatchers("/myAccount","/myBalance","/myLoans","/myCards").authenticated()
	                        .requestMatchers("/notices","/contact").permitAll())
	                .formLogin(Customizer.withDefaults())
	                .httpBasic(Customizer.withDefaults());
	        return http.build();
	        
	        

	     
	        
	 }  
	 
	//Approach 1 where we use withDefaultPasswordEncoder() method while creating the user details*/

	 @Bean
	    public UserDetailsService userDetailsService(DataSource dataSource) {
	        return new JdbcUserDetailsManager(dataSource);
	    }
	        
	        @Bean
	        public PasswordEncoder passwordEncoder() {
	            return NoOpPasswordEncoder.getInstance();
	        }    
}
